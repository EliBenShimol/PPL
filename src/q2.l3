(define make-ok
  (lambda (val)
    (cons "ok" val)
  )
 )

 
(define make-error
  (lambda (msg)
    (cons "error" msg)
  )
 )

(define ok?
  (lambda (res)
    (if(pair? res)
      (if (eq? "ok" (car res))
      #t
      #f
      )
      #f
      )
    )
    )

(define error?
  (lambda (res)
  (if(pair? res)
      (if (eq? "error" (car res))
      #t
      #f
      )
      #f
      )
  )
 )

(define result?
  (lambda (res)
    (if( ok? res)
    #t
    (if(error? res)
       #t
       #f
    )
  )
  )
 )

(define result->val
  (lambda (res)
  (if(result? res)
  (cdr res)
  '()
  )
  )
)

(define bind 
  (lambda (f)
    (lambda (x)
      (if
      (error? x)
      (make-error(cdr x))
      (f (cdr x)))
   )
  )
)

(define make-dict
  (lambda ()
  (cons "dict" '())
  )
)

(define dict?
  (lambda (e)
  (if(pair? e)
  (if(eq? "dict" (car e))
  #t
  #f 
  )
  #f
  )
)
)

(define helpGet
(lambda (list k)
  (if(empty? list)
    (make-error "Key not found")
    (if(= (car(car list)) k)
      (make-ok (cdr(car list)))
      (helpGet (cdr list) k)
    )
  )
 )
)
(define get
  (lambda (dict k)
    (if(dict? dict)
      (helpGet (cdr dict) k)
      (make-error "Error: not a dictionary")
    )
  )
)


(define helpPut
(lambda (list k v)
  (if(empty? list)
    (cons (cons k v) '())
    (if(= (car(car list)) k)
      (cons (cons k v) (cdr list))
      (cons (car list) (helpPut (cdr list) k v))
    )
   )
  )
 )

(define put
  (lambda (dict k v)
    (if(dict? dict)
      (make-ok (cons (car dict) (helpPut (cdr dict) k v)))
      (make-error "Error: not a dictionary")
  )
 )
)

(define mapHelper
  (lambda (list f)
    (if(empty? list)
      '()
      (cons (cons (car (car list)) (f (cdr (car list)))
      ) 
      (mapHelper (cdr list) f))
    )
  )
)

(define map-dict
  (lambda (dict f)
    (if(dict? dict)
      (make-ok (cons (car dict) (mapHelper (cdr dict) f)))
      (make-error "Error: not a dictionary")
    )
  )
)
(define filterHelper
  (lambda (list pred)
    (if(empty? list)
      '()
      (if(pred (car (car list)) (cdr (car list)))
         (cons (car list) (filterHelper (cdr list) pred))
         (filterHelper (cdr list) pred)
      )
    )
  )
)

(define filter-dict
  (lambda (dict pred)
    (if(dict? dict)
      (make-ok (cons (car dict) (filterHelper (cdr dict) pred)))
      (make-error "Error: not a dictionary")
    )
  )
)