
(define make-ok
  (lambda (val)
    (cons "ok" val)
  )
 )

 
(define make-error
  (lambda (msg)
    (cons "error" msg)
  )
 )

(define ok?
  (lambda (res)
    (if(pair? res)
      (if (eq? "ok" (car res))
      #t
      #f
      )
      #f
      )
    )
    )

(define error?
  (lambda (res)
  (if(pair? res)
      (if (eq? "error" (car res))
      #t
      #f
      )
      #f
      )
  )
 )

(define result?
  (lambda (res)
    (if( ok? res)
    #t
    (if(error? res)
       #t
       #f
    )
  )
  )
 )

(define result->val
  (lambda (res)
  (if(result? res)
  (cdr res)
  '()
  )
  )
)

(define bind 
  (lambda (f)
  (lambda (x)
  (if(result? (f x))
  (f x)
  (make-error("cannot operate"))
  )
  )
)
)
(define make-dict
  (lambda ()
    @TODO
  )
)

(define dict?
  (lambda (e)
    @TODO
  )
)

(define get
  (lambda (dict k)
    @TODO
  )
)

(define put
  (lambda (dict k v)
    @TODO
  )
)

(define map-dict
  (lambda (dict f)
    @TODO
  )
)

(define filter-dict
  (lambda (dict pred)
    @TODO
  )
)


