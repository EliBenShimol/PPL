
(define make-ok
  (lambda (val)
    (cons "ok" val)
  )
 )

 
(define make-error
  (lambda (msg)
    (cons "error" msg)
  )
 )

(define ok?
  (lambda (res)
    (if(pair? res)
      (if (eq? "ok" (car res))
      #t
      #f
      )
      #f
      )
    )
    )

(define error?
  (lambda (res)
  (if(pair? res)
      (if (eq? "error" (car res))
      #t
      #f
      )
      #f
      )
  )
 )

(define result?
  (lambda (res)
    (if( ok? res)
    #t
    (if(error? res)
       #t
       #f
    )
  )
  )
 )

(define result->val
  (lambda (res)
  (if(result? res)
  (cdr res)
  '()
  )
  )
)

(define bind 
  (lambda (f)
    (lambda (x)
      (if
      (error? x)
      (make-error(cdr x))
      (f (cdr x)))
   )
  )
)

(define make-dict
  (lambda ()
  (cons "dict" '())
  )
)

(define dict?
  (lambda (e)
  (if(pair? e)
  (if(eq? "dict" (car e))
  #t
  #f 
  )
  #f
  )
)
)

(define get
  (lambda (dict k)
  (helpGet (cdr dict) k)
  )
)

(define helpGet
(lambda (list k)
(if(empty? list)
(make-error k)
(if(= car(car list) k)
(make-ok cdr(car list))
(helpGet (cdr list) k)
)
)
)
)

(define put
  (lambda (dict k v)
    (cons (car dict) (helpPut((cdr dict) k v))
  )
)
)

(define helpPut
(lambda (list k v)
(if(empty? list)
(cons (cons k v) '())
(if(= car(car list) k)
(cons (cons k v) (cdr list))
(cons (car list) helpPut((cdr list) k v))
)
)
)
)

(define map-dict
  (lambda (dict f)
    @TODO
  )
)

(define filter-dict
  (lambda (dict pred)
    @TODO
  )
)


